// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub neurolend_collateral_addeds: ::prost::alloc::vec::Vec<NeurolendCollateralAdded>,
    #[prost(message, repeated, tag="2")]
    pub neurolend_collateral_removeds: ::prost::alloc::vec::Vec<NeurolendCollateralRemoved>,
    #[prost(message, repeated, tag="3")]
    pub neurolend_loan_accepteds: ::prost::alloc::vec::Vec<NeurolendLoanAccepted>,
    #[prost(message, repeated, tag="4")]
    pub neurolend_loan_createds: ::prost::alloc::vec::Vec<NeurolendLoanCreated>,
    #[prost(message, repeated, tag="5")]
    pub neurolend_loan_liquidateds: ::prost::alloc::vec::Vec<NeurolendLoanLiquidated>,
    #[prost(message, repeated, tag="6")]
    pub neurolend_loan_matcheds: ::prost::alloc::vec::Vec<NeurolendLoanMatched>,
    #[prost(message, repeated, tag="7")]
    pub neurolend_loan_offer_cancelleds: ::prost::alloc::vec::Vec<NeurolendLoanOfferCancelled>,
    #[prost(message, repeated, tag="8")]
    pub neurolend_loan_offer_removeds: ::prost::alloc::vec::Vec<NeurolendLoanOfferRemoved>,
    #[prost(message, repeated, tag="9")]
    pub neurolend_loan_repaids: ::prost::alloc::vec::Vec<NeurolendLoanRepaid>,
    #[prost(message, repeated, tag="10")]
    pub neurolend_loan_request_cancelleds: ::prost::alloc::vec::Vec<NeurolendLoanRequestCancelled>,
    #[prost(message, repeated, tag="11")]
    pub neurolend_loan_request_createds: ::prost::alloc::vec::Vec<NeurolendLoanRequestCreated>,
    #[prost(message, repeated, tag="12")]
    pub neurolend_loan_request_removeds: ::prost::alloc::vec::Vec<NeurolendLoanRequestRemoved>,
    #[prost(message, repeated, tag="13")]
    pub neurolend_ownership_transferreds: ::prost::alloc::vec::Vec<NeurolendOwnershipTransferred>,
    #[prost(message, repeated, tag="14")]
    pub neurolend_partial_repayments: ::prost::alloc::vec::Vec<NeurolendPartialRepayment>,
    #[prost(message, repeated, tag="15")]
    pub neurolend_price_feed_sets: ::prost::alloc::vec::Vec<NeurolendPriceFeedSet>,
    #[prost(message, repeated, tag="16")]
    pub neurolend_price_update_paids: ::prost::alloc::vec::Vec<NeurolendPriceUpdatePaid>,
    /// Additional events for comprehensive tracking
    #[prost(message, repeated, tag="17")]
    pub erc20_transfers: ::prost::alloc::vec::Vec<Erc20Transfer>,
    #[prost(message, repeated, tag="18")]
    pub erc20_approvals: ::prost::alloc::vec::Vec<Erc20Approval>,
    #[prost(message, repeated, tag="19")]
    pub generic_logs: ::prost::alloc::vec::Vec<GenericLog>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Calls {
    #[prost(message, repeated, tag="1")]
    pub neurolend_call_accept_loan_offer_1s: ::prost::alloc::vec::Vec<NeurolendAcceptLoanOffer1call>,
    #[prost(message, repeated, tag="2")]
    pub neurolend_call_accept_loan_offer_2s: ::prost::alloc::vec::Vec<NeurolendAcceptLoanOffer2call>,
    #[prost(message, repeated, tag="3")]
    pub neurolend_call_add_collaterals: ::prost::alloc::vec::Vec<NeurolendAddCollateralCall>,
    #[prost(message, repeated, tag="4")]
    pub neurolend_call_cancel_loan_offers: ::prost::alloc::vec::Vec<NeurolendCancelLoanOfferCall>,
    #[prost(message, repeated, tag="5")]
    pub neurolend_call_cancel_loan_requests: ::prost::alloc::vec::Vec<NeurolendCancelLoanRequestCall>,
    #[prost(message, repeated, tag="6")]
    pub neurolend_call_create_loan_offer_1s: ::prost::alloc::vec::Vec<NeurolendCreateLoanOffer1call>,
    #[prost(message, repeated, tag="7")]
    pub neurolend_call_create_loan_offer_2s: ::prost::alloc::vec::Vec<NeurolendCreateLoanOffer2call>,
    #[prost(message, repeated, tag="8")]
    pub neurolend_call_create_loan_request_1s: ::prost::alloc::vec::Vec<NeurolendCreateLoanRequest1call>,
    #[prost(message, repeated, tag="9")]
    pub neurolend_call_create_loan_request_2s: ::prost::alloc::vec::Vec<NeurolendCreateLoanRequest2call>,
    #[prost(message, repeated, tag="10")]
    pub neurolend_call_fill_loan_offer_1s: ::prost::alloc::vec::Vec<NeurolendFillLoanOffer1call>,
    #[prost(message, repeated, tag="11")]
    pub neurolend_call_fill_loan_offer_2s: ::prost::alloc::vec::Vec<NeurolendFillLoanOffer2call>,
    #[prost(message, repeated, tag="12")]
    pub neurolend_call_fill_loan_requests: ::prost::alloc::vec::Vec<NeurolendFillLoanRequestCall>,
    #[prost(message, repeated, tag="13")]
    pub neurolend_call_liquidate_loans: ::prost::alloc::vec::Vec<NeurolendLiquidateLoanCall>,
    #[prost(message, repeated, tag="14")]
    pub neurolend_call_make_partial_repayments: ::prost::alloc::vec::Vec<NeurolendMakePartialRepaymentCall>,
    #[prost(message, repeated, tag="15")]
    pub neurolend_call_remove_collaterals: ::prost::alloc::vec::Vec<NeurolendRemoveCollateralCall>,
    #[prost(message, repeated, tag="16")]
    pub neurolend_call_renounce_ownerships: ::prost::alloc::vec::Vec<NeurolendRenounceOwnershipCall>,
    #[prost(message, repeated, tag="17")]
    pub neurolend_call_repay_loans: ::prost::alloc::vec::Vec<NeurolendRepayLoanCall>,
    #[prost(message, repeated, tag="18")]
    pub neurolend_call_set_token_price_feed_ids: ::prost::alloc::vec::Vec<NeurolendSetTokenPriceFeedIdCall>,
    #[prost(message, repeated, tag="19")]
    pub neurolend_call_transfer_ownerships: ::prost::alloc::vec::Vec<NeurolendTransferOwnershipCall>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventsCalls {
    #[prost(message, optional, tag="1")]
    pub events: ::core::option::Option<Events>,
    #[prost(message, optional, tag="2")]
    pub calls: ::core::option::Option<Calls>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendCollateralAdded {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(string, tag="5")]
    pub loan_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub borrower: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub amount: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub new_collateral_ratio: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub timestamp: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendCollateralRemoved {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(string, tag="5")]
    pub loan_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub borrower: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub amount: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub new_collateral_ratio: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub timestamp: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendLoanAccepted {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(string, tag="5")]
    pub loan_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub borrower: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub timestamp: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub initial_collateral_ratio: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendLoanCreated {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(string, tag="5")]
    pub loan_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub lender: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub token_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="8")]
    pub amount: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub interest_rate: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub duration: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="11")]
    pub collateral_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="12")]
    pub collateral_amount: ::prost::alloc::string::String,
    #[prost(string, tag="13")]
    pub min_collateral_ratio_bps: ::prost::alloc::string::String,
    #[prost(string, tag="14")]
    pub liquidation_threshold_bps: ::prost::alloc::string::String,
    #[prost(string, tag="15")]
    pub max_price_staleness: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendLoanLiquidated {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(string, tag="5")]
    pub loan_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub liquidator: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub collateral_claimed_by_lender: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub liquidator_reward: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub timestamp: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendLoanMatched {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(string, tag="5")]
    pub loan_id: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub offer_id: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="8")]
    pub lender: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="9")]
    pub borrower: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="10")]
    pub amount: ::prost::alloc::string::String,
    #[prost(string, tag="11")]
    pub interest_rate: ::prost::alloc::string::String,
    #[prost(string, tag="12")]
    pub timestamp: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendLoanOfferCancelled {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(string, tag="5")]
    pub loan_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub lender: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub timestamp: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendLoanOfferRemoved {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(string, tag="5")]
    pub loan_id: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub reason: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendLoanRepaid {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(string, tag="5")]
    pub loan_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub borrower: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub repayment_amount: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub timestamp: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendLoanRequestCancelled {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(string, tag="5")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub borrower: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub timestamp: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendLoanRequestCreated {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(string, tag="5")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub borrower: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub token_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="8")]
    pub amount: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub max_interest_rate: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub duration: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="11")]
    pub collateral_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="12")]
    pub collateral_amount: ::prost::alloc::string::String,
    #[prost(string, tag="13")]
    pub min_collateral_ratio_bps: ::prost::alloc::string::String,
    #[prost(string, tag="14")]
    pub liquidation_threshold_bps: ::prost::alloc::string::String,
    #[prost(string, tag="15")]
    pub max_price_staleness: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendLoanRequestRemoved {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(string, tag="5")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub reason: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendOwnershipTransferred {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub previous_owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub new_owner: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendPartialRepayment {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(string, tag="5")]
    pub loan_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub borrower: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub repayment_amount: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub total_repaid_amount: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub remaining_amount: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub timestamp: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendPriceFeedSet {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub token_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub feed_id: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendPriceUpdatePaid {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(string, tag="5")]
    pub loan_id: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub update_fee: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub timestamp: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendAcceptLoanOffer1call {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(string, tag="6")]
    pub loan_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendAcceptLoanOffer2call {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(string, tag="6")]
    pub loan_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", repeated, tag="7")]
    pub price_update: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendAddCollateralCall {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(string, tag="6")]
    pub loan_id: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub additional_amount: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendCancelLoanOfferCall {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(string, tag="6")]
    pub loan_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendCancelLoanRequestCall {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(string, tag="6")]
    pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendCreateLoanOffer1call {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(bytes="vec", tag="6")]
    pub u_token_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub u_amount: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub u_interest_rate: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub u_duration: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="10")]
    pub u_collateral_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="11")]
    pub u_collateral_amount: ::prost::alloc::string::String,
    #[prost(string, tag="12")]
    pub u_min_collateral_ratio_bps: ::prost::alloc::string::String,
    #[prost(string, tag="13")]
    pub u_liquidation_threshold_bps: ::prost::alloc::string::String,
    #[prost(string, tag="14")]
    pub u_max_price_staleness: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendCreateLoanOffer2call {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(bytes="vec", tag="6")]
    pub u_token_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub u_amount: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub u_interest_rate: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub u_duration: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="10")]
    pub u_collateral_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="11")]
    pub u_collateral_amount: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendCreateLoanRequest1call {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(bytes="vec", tag="6")]
    pub u_token_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub u_amount: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub u_max_interest_rate: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub u_duration: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="10")]
    pub u_collateral_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="11")]
    pub u_collateral_amount: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendCreateLoanRequest2call {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(bytes="vec", tag="6")]
    pub u_token_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub u_amount: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub u_max_interest_rate: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub u_duration: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="10")]
    pub u_collateral_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="11")]
    pub u_collateral_amount: ::prost::alloc::string::String,
    #[prost(string, tag="12")]
    pub u_min_collateral_ratio_bps: ::prost::alloc::string::String,
    #[prost(string, tag="13")]
    pub u_liquidation_threshold_bps: ::prost::alloc::string::String,
    #[prost(string, tag="14")]
    pub u_max_price_staleness: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendFillLoanOffer1call {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(string, tag="6")]
    pub offer_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendFillLoanOffer2call {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(string, tag="6")]
    pub offer_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", repeated, tag="7")]
    pub price_update: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendFillLoanRequestCall {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(string, tag="6")]
    pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendLiquidateLoanCall {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(string, tag="6")]
    pub loan_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", repeated, tag="7")]
    pub price_update: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendMakePartialRepaymentCall {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(string, tag="6")]
    pub loan_id: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub repayment_amount: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendRemoveCollateralCall {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(string, tag="6")]
    pub loan_id: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub remove_amount: ::prost::alloc::string::String,
    #[prost(bytes="vec", repeated, tag="8")]
    pub price_update: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendRenounceOwnershipCall {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendRepayLoanCall {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(string, tag="6")]
    pub loan_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendSetTokenPriceFeedIdCall {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(bytes="vec", tag="6")]
    pub u_token_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub u_feed_id: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NeurolendTransferOwnershipCall {
    #[prost(string, tag="1")]
    pub call_tx_hash: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub call_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="3")]
    pub call_block_number: u64,
    #[prost(uint64, tag="4")]
    pub call_ordinal: u64,
    #[prost(bool, tag="5")]
    pub call_success: bool,
    #[prost(bytes="vec", tag="6")]
    pub new_owner: ::prost::alloc::vec::Vec<u8>,
}
/// Additional event types for comprehensive tracking
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Erc20Transfer {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub contract_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="8")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Erc20Approval {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub contract_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub spender: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="8")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenericLog {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub contract_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", repeated, tag="6")]
    pub topics: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes="vec", tag="7")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
// @@protoc_insertion_point(module)
